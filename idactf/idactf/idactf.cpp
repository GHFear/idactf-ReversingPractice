// HexRays IDA Pro Madame Challenge. (3/4 Completed)

#include <iostream>
#include <intrin.h>
#include <Windows.h>
#include <openssl/aes.h>
#include <openssl/rsa.h>
#include "Solution.h"

//Global
int dword_408488 = 0;
int dword_408484 = 0;
int dword_408480 = 0;
unsigned char data_408380[10] = {0,0,0,0,0,0,0,0,0,0}; //This is src
char src[200];
char* src_ptr = src;

// Main
char intro[] = "You have heard rumours that the diary of Madame de Maintenon contained the secrets to a legendary plot.\nGood luck on your journey to uncovering the truth behind this mystery!\n";

//RSA_Decrypt
uint64_t data_4076a0[32];
char data_40338e[2] = { 0x33, 0x00 };
char data_4077a0[513] = "8e449627141446d50a3bfab5d9fc0d58c6b9f64630d011cb5c831c5989402de1f553ae70c9f8ddefb42f001e553fe7d852bb08cec6efebe490eb40c91955b020159c66836a5d7d5364da7cab32deff4ea6ec1e41bdda7b7c298da68d4be77e4750bf86d5d24ed67511bb37a105bc4da0e3ec0cd4960a1ae2986fd402101061d290f292030bcf21a38d77dbde760d01a3faaa210e34a4e471fa0eac5518d2f01faa70659f582a9e211ff6b438b0bb1abb49f4bb458acefd7bbcc8f68ed7cd121bf16ad1d5e0cd5384b4e3441de7d5ec3c10c52ed9263ffe3c6af5ba508f0b774e932dece2f84c053f972ca31a68c1cd13668db6adb3e2320c93a0b06ae1737ad9";

//Input_handler
unsigned char unk_4077A0[512];
char unk_406EA0[513] = "678dcc64ccf7c29ffe64838a80196bd90b2d6247e4d712cb60c6a4a3a09ac088b9d1b19518451ce1a295ca6134a65cb5176083849e11cea23cf5d6c303ee95d02f1af26f741131d03c4e86866e26b09069c0be5c718298ed1cfc01493d78520957e25c2d921f6b6518ef5ef608e209d4d9ad613fdb6a2eb4156c906c89583949ca076312c6a258f14794ee852a61f27fe2a6b17b1ea85de3e40a2636fc4430e920ed8dc688aebdb6f5e63140f7844f3597c82704545c308a36e20eb94e00b35eaee860835c2f213956bfb79bb17d9b914524a5b133be5af4667ca0710420ca6bd90c28761ba1d52ed7d83d927245f53d45b35f2f1729ff602271abb0ebf7ce5b";
char unk_4065A0[513] = "b1b751bdef5727862c0f6bddcaa9802722b2499c760e02d7bb4c38629339194431dbeb41a6222e01dca0fa8e792562ccc9bcf9c57549037a44eb4945daf4440ac4f4aab3bdf1566a3961c88e8cdb925870e68e9064354568335eefc62344fdac06593bdd8c4dc63c0af932f5dab986919f4acb4b602896ba1896c3d0bc00a9bd6408a85e3e8766bfd44af0ab151d3537c2b2955eebe9cbcd6871146524253e14e374cdda166e8b298932695c774ab8f8ac332a92fa49c91f65ce1a01b12e3d056990c954a3c6fa9346a67819bbc76d9cfbebff9810841810ccfdd3a3773cc24ead32665b8e667b1b0b817f0bb3d8d7ca17342e6b2d024762e2ecbf897af9cb15";

//Page 1
char page1_encrypted_message[] = { 0xD9 ,0xF6 ,0x19 ,0xB6 ,0xE0 ,0x2C ,0x6B ,0x81 ,0x39 ,0xDD ,0x1D ,0x33 ,0x3F ,0x22 ,0x20 ,0x94 ,0xD3 ,0x09 ,0xAE ,0xF0 ,0xC8 ,0x7F ,0xB9 ,0xE3 ,0x5C ,0x04 ,0x44 ,0x99 ,0x33 ,0xFC ,0xF6 ,0xD9 ,0xB1 ,0x86 ,0x53 ,0xB2 ,0xE7 ,0x91 ,0x87 ,0x7C ,0x6C ,0xE9 ,0xA3 ,0xC2 ,0x7D ,0xC6 ,0x57 ,0xAF ,0x2A ,0x4B ,0x8E ,0x5F ,0xDA ,0x6F ,0x43 ,0xF4 ,0xC6 ,0xFC ,0x80 ,0x20 ,0x33 ,0xA8 ,0x41 ,0x94 ,0x5E ,0x22 ,0x13 ,0xB5 ,0xDB ,0x11 ,0xCC ,0x07 ,0xBE ,0x60 ,0xBF ,0x50 ,0x43 ,0x08 ,0x20 ,0x7E ,0x94 ,0x87 ,0xD1 ,0x4B ,0x14 ,0x0D ,0x0B ,0xA1 ,0x0A ,0x44 ,0x23 ,0xBF ,0xF8 ,0x31 ,0x06 ,0xCC ,0xB5 ,0xFE ,0xD4 ,0xF1 ,0xC0 ,0x26 ,0x05 ,0x66 ,0x55 ,0xDD ,0xB9 ,0x32 ,0x68 ,0xEE ,0xAF ,0xA2 ,0xD1 ,0x59 ,0x48 ,0x07 ,0x68 ,0x83 ,0x4E ,0xCF ,0xD9 ,0xFE ,0x42 ,0x3E ,0x6A ,0x83 ,0x07 ,0xAA ,0x7A ,0x2F ,0xF0 ,0xF7 ,0x02 ,0x3A ,0x38 ,0x77 ,0xDE ,0xD0 ,0x20 ,0xAC ,0x03 ,0x3F ,0x64 ,0x73 ,0xEB ,0xF4 ,0xFD ,0xA0 ,0xE4 ,0x39 ,0xAD ,0xF6 ,0x6D ,0x97 ,0x74 ,0x21 ,0x4C ,0x93 ,0xB8 ,0xE1 ,0xBF ,0x20 ,0x09 ,0xB3 ,0xDF ,0x71 ,0x2B ,0x78 ,0xB3 ,0x1A ,0xC8 ,0xE3 ,0x62 ,0x0A ,0xC6 ,0xC0 ,0x81 ,0xEA ,0xE3 ,0xFC ,0xE9 ,0xEF ,0xC7 ,0x65 ,0xFA ,0x4C ,0x07 ,0x71 ,0x55 ,0x10 ,0x01 ,0x8E ,0x6B ,0x4B ,0x54 ,0x13 ,0x15 ,0xE9 ,0x06 ,0x92 ,0xC5 ,0x45 ,0x21 ,0x35 ,0x8F ,0xC2 ,0x6A ,0xEE ,0x59 ,0x4E ,0xC4 ,0x00 ,0x55 ,0x42 ,0xD1 ,0x9E ,0x43 ,0x04 ,0x1C ,0xB6 ,0x09 ,0x93 ,0x2B ,0x37 ,0x8B ,0x5C ,0x2A ,0x3B ,0x35 ,0x63 ,0xA9 ,0xF8 ,0x86 ,0x9A ,0xA9 ,0xFD ,0x40 ,0xB2 ,0x25 ,0xA3 ,0xD9 ,0x8E ,0x9F ,0xCE ,0xAD ,0x27 ,0xDB ,0xD0 ,0x35 ,0x9A ,0x8A ,0xEE ,0xE4 ,0x41 ,0x67 ,0x05 ,0xA4 ,0x8C ,0xCA ,0xDB ,0x33 ,0xE8 ,0xD0 ,0xFF ,0x1F ,0x23 ,0xFB ,0x11 ,0x0F ,0x44 ,0x03 ,0xB1 ,0xEE ,0x93 ,0x0F ,0xB9 ,0xA7 ,0x44 ,0x18 ,0xCF ,0x7B ,0x02 ,0xF0 ,0x44 ,0x00 ,0x9E ,0xC2 ,0x36 ,0xE6 ,0xF0 ,0xC9 ,0x3E ,0x20 ,0xE4 ,0x98 ,0x85 ,0xB8 ,0xC3 ,0xA4 ,0x4E ,0x39 ,0x66 ,0x72 ,0x03 ,0x9F ,0x98 ,0xC5 ,0x37 ,0x30 ,0x05 ,0x2C ,0xE4 ,0xFC ,0x03 ,0x4F ,0xFE ,0xC9 ,0x2B ,0xF5 ,0x86 ,0x1F ,0x67 ,0xEB ,0x13 ,0xD0 ,0x55 ,0x52 ,0xC5 ,0x1C ,0x4F ,0x04 ,0xB2 ,0x69 ,0x76 ,0xC3 ,0x4F ,0x30 ,0xF2 ,0xAC ,0x97 ,0x2B ,0x70 ,0xFD ,0x38 ,0x1F ,0x46 ,0xDC ,0x2F ,0x0E ,0xE3 ,0xAE ,0xB8 ,0x9D ,0x03 ,0xF0 ,0xA6 ,0x42 ,0xAB ,0x6C ,0xDC ,0x01 ,0xDC ,0x56 ,0x4B ,0x7D ,0x8F ,0x46 ,0x45 ,0xA8 ,0x9B ,0x80 ,0x89 ,0x30 ,0x29 ,0x31 ,0xE8 ,0x8A ,0x4D ,0x9F ,0x4E ,0xF5 ,0xB9 ,0x5F ,0x98 ,0x85 ,0xB6 ,0xE4 ,0xF7 ,0xEA ,0xFB ,0xA7 ,0x5F ,0x7F ,0x7E ,0x7F ,0x50 ,0x88 ,0x91 ,0xBA ,0xF4 ,0x3C ,0xD7 ,0x6F ,0x68 ,0x4D ,0xD2 ,0x24 ,0x67 ,0x71 ,0x5D ,0x9C ,0x3E ,0xFD ,0xB3 ,0x04 ,0x7E ,0x4E ,0xC1 ,0xF8 ,0x32 ,0xD9 ,0x1A ,0xCC ,0x96 ,0x0F ,0xBF ,0xFD ,0xA6 ,0xDE ,0x15 ,0xB8 ,0x8B ,0xA4 ,0x21 ,0x7E ,0x81 ,0x14 ,0x2F ,0x3E ,0x53 ,0x31 ,0xE1 ,0x1B ,0x86 ,0x3A ,0x44 ,0x73 ,0xDD ,0x79 ,0x4E ,0xFB ,0x49 ,0x9F ,0xD4 ,0x81 ,0xA9 ,0x26 ,0xE6 ,0x04 ,0xEE ,0xAB ,0xF0 ,0xF2 ,0x95 ,0xF4 ,0x07 ,0x82 ,0x61 ,0x04 ,0xD4 ,0xDA ,0x82 ,0x39 ,0xAD ,0x2F ,0xE0 ,0x72 ,0xA2 ,0x6F ,0xA1 ,0x49 ,0xDF ,0x17 ,0x83 ,0x1D ,0x2D ,0xA3 ,0xCC ,0x21 ,0x63 ,0x2C ,0x0B ,0x48 ,0xAE ,0x45 ,0x99 ,0xF8 ,0x6F ,0x5A ,0xA5 ,0x8B ,0xE7 ,0xE5 ,0x5D ,0x6C ,0xCF ,0x3F ,0x9B ,0x4D ,0x93 ,0x00 ,0x20 ,0xAA ,0xD3 ,0xC0 ,0xE8 ,0xF8 ,0x8E ,0x42 ,0x78 ,0xD1 ,0x8B ,0x32 ,0xAB ,0xA6 ,0x09 ,0x12 ,0x46 ,0xFF ,0x50 ,0x39 ,0xD6 ,0x61 ,0xCB ,0xE4 ,0xC3 ,0xE3 ,0x4B ,0xE3 ,0x3F ,0xE5 ,0xA2 ,0xB9 ,0xB0 ,0x6E ,0x39 ,0x6E ,0xA4 ,0xC3 ,0xD3 ,0xC1 ,0xDC ,0x48 ,0xBB ,0xFD ,0x9B ,0x02 ,0xC3 ,0x88 ,0x59 ,0xE7 ,0xA9 ,0xA1 ,0xFE ,0x32 ,0x57 ,0x96 ,0xCC ,0x24 ,0xCE ,0x87 ,0xF4 ,0x1A ,0xE4 ,0x55 ,0x22 ,0x47 ,0x79 ,0xD9 ,0xFA ,0xA3 ,0x0F ,0x07 ,0x6A ,0xDC ,0xC9 ,0x58 ,0x36 ,0x95 ,0xD0 ,0x02 ,0xCB ,0xB8 ,0x65 ,0x0A ,0x6F ,0x9E ,0x5F ,0x54 ,0xC5 ,0x5B ,0xEA ,0x86 ,0xAC ,0xF8 ,0x93 ,0xBA ,0xB9 ,0xCC ,0xE8 ,0x79 ,0x30 ,0x85 ,0x54 ,0xDF ,0xA0 ,0x13 ,0x07 ,0x9B ,0x35 ,0xB3 ,0x53 ,0x5A ,0x40 ,0x6C ,0x71 ,0x41 ,0xDD ,0x5F ,0x89 ,0x45 ,0x16 ,0xA8 ,0xE1 ,0x94 ,0x59 ,0xF5 ,0xAD ,0x31 ,0x7C ,0x67 ,0x10 ,0xB6 ,0xE4 ,0x99 ,0x73 ,0x9B ,0x6B ,0x80 ,0xA1 ,0xF2 ,0x58 ,0x47 ,0x49 ,0x0C ,0x76 ,0x43 ,0xE8 ,0x2F ,0x0C ,0x6A ,0x08 ,0x40 ,0xAC ,0x5D ,0x9E ,0x59 ,0xEB ,0xE0 ,0x88 ,0xF1 ,0xA8 ,0x78 ,0x14 ,0x88 ,0x6C ,0x11 ,0x3F ,0xDC ,0x2E ,0x0E ,0x76 ,0xC6 ,0x6B ,0x88 ,0x0B ,0x00 ,0xAD ,0xB3 ,0x35 ,0x22 ,0x92 ,0x41 ,0xC8 ,0xD1 ,0x69 ,0x7E ,0x7A ,0xD9 ,0x8D ,0x76 ,0xE6 ,0x5E ,0x3F ,0xD0 ,0x33 ,0xB5 ,0xB3 ,0x69 ,0x14 ,0x73 ,0x78 ,0x4A ,0x97 ,0x71 ,0x31 ,0x0E ,0xB9 ,0x2C ,0xB6 ,0x9B ,0x3A ,0x88 ,0xE5 ,0x2F ,0xE0 ,0xE7 ,0xE9 ,0x92 ,0xFD ,0x2B ,0x9C ,0x3D ,0xD9 ,0x42 ,0x25 ,0xE4 ,0x09 ,0xFF ,0x8D ,0x28 ,0x5C ,0x48 ,0x39 ,0x77 ,0x01 ,0x06 ,0x05 ,0x97 ,0x9C ,0xA8 ,0xED ,0xAC ,0x41 ,0x5B ,0xA9 ,0x9C ,0x7B ,0x17 ,0x58 ,0x9D ,0xFE ,0xFC ,0x0D ,0xD5 ,0x81 ,0x6D ,0x9D ,0x70 ,0x2E ,0xA8 ,0x19 ,0x4C ,0x1D ,0xC6 ,0xA5 ,0x3D ,0x87 ,0xF6 ,0xC6 ,0x36 ,0xDF ,0xDC ,0x44 ,0x10 ,0x39 ,0xF4 ,0x30 ,0x9A ,0xD5 ,0xDB ,0x51 ,0x3B ,0xF8 ,0x94 ,0x94 ,0x8F ,0xC3 ,0x36 ,0x76 ,0x14 ,0x9D ,0xC7 ,0x8E ,0x12 ,0x41 ,0xCF ,0xB5 ,0xAB ,0xDB ,0x77 ,0x9D ,0x1B ,0x7B ,0xE2 ,0xF1 ,0x35 ,0x7C ,0x6F ,0x60 ,0xB3 ,0x07 ,0xF6 ,0xE2 ,0x04 ,0xDE ,0x17 ,0xFF ,0x87 ,0x20 ,0x29 ,0x3C ,0x84 ,0x3A ,0x5D ,0x36 ,0x47 ,0x2F ,0xF1 ,0xBF ,0x9F ,0x27 ,0xBC ,0x8E ,0x36 ,0x03 ,0xE7 ,0xDC ,0xD6 ,0x75 ,0xFB ,0x92 ,0x17 ,0x6D ,0x6C ,0x15 ,0x0A ,0x33 ,0x20 ,0x4E ,0xC0 ,0x06 ,0xD1 ,0xF2 ,0x21 ,0x2E ,0xE2 ,0x6B ,0x61 ,0x91 ,0xF2 ,0x84 ,0xB6 ,0x14 ,0xBB ,0x66 ,0xDA ,0x06 ,0xA1 ,0x49 ,0x18 ,0x1A ,0x2D ,0xA7 ,0x1E ,0x8A ,0x37 ,0x41 ,0xCE ,0x6E ,0xA4 ,0xB3 ,0xDC ,0x35 ,0x34 ,0xE1 };
char  page1_encrypted_message_buffer[1536];
char  page1_decrypted_message[1536];

//Page 2
unsigned char page2_encrypted_message[608] = { 0x2A,0x05,0x9D,0xF2,0x08,0xB4,0x93,0x0D,0x0B,0xDF,0xC1,0x8C,0x14,0xF3,0x10,0x2B,0x94,0xBE,0xC0,0x4F,0x41,0x02,0x3D,0x57,0x16,0xAF,0x9B,0x5E,0xBA,0xD9,0xED,0x41,0x05,0xD3,0x2E,0xA2,0xEE,0xE2,0x1E,0x7B,0x7F,0x6C,0xC1,0x9B,0x0A,0x69,0x7D,0xBF,0xCE,0xF9,0x76,0x62,0xCF,0x76,0x57,0xF5,0xD8,0xED,0x13,0xAA,0xBB,0x7A,0x09,0x6A,0xB9,0xBC,0xF3,0x8F,0xC0,0x62,0x5B,0xA5,0x23,0x6D,0xAF,0x89,0x6F,0xDE,0x5A,0x9E,0x10,0x73,0x87,0x9D,0x89,0xA2,0x26,0x21,0x8F,0x23,0xAE,0xFD,0x9A,0x43,0x08,0x87,0x2E,0x50,0x68,0x56,0x91,0xFD,0x3C,0x7E,0xBB,0x0E,0xBB,0x9C,0xA0,0x5D,0xB8,0xBA,0xF7,0xB7,0x94,0xAD,0x31,0x24,0xD1,0xAB,0x26,0x33,0x25,0x1C,0x00,0xE2,0x69,0xC7,0xF7,0x81,0xAB,0xC9,0x0F,0xF4,0xB9,0x34,0xC2,0xEF,0x75,0x38,0xE3,0xD3,0x0E,0xB5,0x30,0xF0,0x8D,0x46,0x89,0x73,0xAD,0x57,0x53,0x32,0x6E,0xD5,0xCF,0xF3,0xF8,0x23,0x45,0x01,0x93,0xDF,0x73,0x4F,0x02,0x9A,0x87,0x26,0x82,0x97,0x6A,0x3B,0xCC,0xB9,0x04,0x1A,0x77,0x40,0xDE,0xC0,0x96,0x55,0x72,0x4B,0x2E,0xA4,0x7A,0x70,0x2D,0x4F,0x1F,0xFF,0x59,0x75,0xAA,0x39,0xFB,0x13,0xD6,0x40,0x3C,0xA1,0xE3,0xD3,0xC5,0x2D,0x02,0xBE,0xD0,0xC8,0x42,0x16,0x62,0x05,0xC5,0x71,0xE4,0xC0,0x16,0x42,0x84,0x85,0x15,0x0E,0x08,0x56,0xCD,0x97,0xE6,0x50,0x8F,0xF8,0x15,0xDF,0x65,0x5E,0x52,0x17,0x93,0x6D,0x6C,0x4C,0x8C,0xE9,0xFB,0xF6,0x1B,0x2A,0xBF,0x7C,0xF4,0xCF,0xFE,0x5E,0x16,0xAD,0xED,0xAB,0x03,0x68,0x59,0x51,0xE4,0xB1,0x0F,0x45,0x15,0x2A,0x9B,0x09,0x23,0xD2,0xC5,0x8A,0x91,0xD4,0x39,0x5C,0x8E,0xC1,0x1C,0x03,0x81,0xA0,0x5A,0x72,0xEC,0x72,0x7A,0x6F,0x94,0xBD,0xAD,0xF5,0x09,0xE7,0x83,0xE7,0x55,0xEA,0x15,0x78,0xA2,0x9A,0xB4,0x08,0xB0,0x6B,0x70,0x64,0xE6,0xE9,0xF4,0xC3,0xCA,0x23,0x92,0x65,0xA9,0x82,0x5E,0x69,0x3E,0x07,0xB4,0xBC,0x03,0x25,0xEE,0x07,0xF1,0x4A,0x74,0x4D,0xEA,0x34,0x6F,0x0B,0x58,0xB0,0x0D,0x9B,0x4C,0x67,0x72,0x0E,0x9D,0xDA,0x43,0x1C,0xC7,0xFB,0xC9,0x4D,0x4D,0xCA,0xB8,0x78,0xAB,0xEC,0xFA,0x3F,0x88,0x04,0x94,0x9F,0x17,0x5F,0x5A,0x21,0xE6,0xDC,0xAC,0x61,0x04,0x86,0xB1,0xD8,0x1D,0xFB,0x90,0xB3,0xFF,0x0C,0xDA,0x03,0xA8,0xAE,0x17,0x5F,0xCA,0x9C,0x5B,0x8F,0x1A,0x4B,0x71,0x5B,0x60,0x2C,0x28,0x44,0x94,0x5B,0xFA,0x9D,0xC0,0xE5,0x06,0xE7,0x5B,0xF3,0xCD,0x08,0xB2,0xC5,0xAE,0xBC,0x8E,0x33,0x49,0xEE,0xAD,0x31,0xFB,0x77,0x77,0x29,0xB1,0x99,0x7A,0xA1,0x32,0x29,0x24,0x97,0xE4,0xE9,0x25,0xD2,0x63,0xE6,0xFF,0x8C,0xB7,0x30,0x4A,0x1F,0xAA,0x34,0xE6,0xB3,0x85,0xC1,0x8D,0x73,0x8A,0x90,0xFE,0xA2,0x4E,0x99,0x96,0x7E,0x04,0xA5,0xEA,0x51,0xE1,0xC9,0x08,0x84,0x59,0xB4,0x67,0xE6,0xF5,0x2B,0x29,0x4E,0x88,0x44,0x8C,0x60,0x80,0xEE,0x9D,0x2D,0x65,0x4F,0xF8,0xF3,0x62,0x54,0xD4,0x42,0xB4,0xBF,0x4C,0x29,0x0E,0xCC,0x36,0xB8,0xD7,0xD5,0xDA,0xDA,0x4A,0x84,0x5F,0x4E,0xC0,0x91,0xD1,0x35,0x0F,0xE4,0x36,0xDE,0x36,0x22,0x34,0xAD,0x70,0x8F,0xF1,0xE0,0x08,0x13,0xC9,0x75,0xA8,0xB1,0x67,0x1E,0xB0,0xE1,0x0A,0x13,0x1B,0xA3,0xB8,0x5B,0xEC,0xAD,0x82,0x9F,0x30,0x22,0x15,0xE7,0x12,0xD5,0x18,0xBA,0x6A,0xD4,0x09,0x38,0xCC,0xB1,0x16,0x4D,0x8A,0x3C,0xE2,0x20,0xD6,0x2F,0xE1,0x34,0x3F,0x21,0x81,0xFA,0xFD,0x66,0x76,0x6F,0x1E,0x61,0x96,0xAC,0x83,0x5D,0x6F,0xB6,0x6D,0x6F,0xBA,0x9E,0x06,0xF4,0x00,0x2C,0x00,0xEF,0x04,0xA8,0x51,0x06,0x3A,0x42,0xAD,0xDC };
unsigned char page2_encrypted_message_buffer[1536] = {};
unsigned char xmmword_406DA0[256] = { 0x67 ,0x51 ,0x2E ,0x54 ,0xFF ,0x9C ,0xD8 ,0x53 ,0xAB ,0x64 ,0x5A ,0x69 ,0xEC ,0x8F ,0x64 ,0x00 ,0x9F ,0xAD ,0x60 ,0xEE ,0xE8 ,0x4C ,0xE5 ,0xD9 ,0xA5 ,0xDB ,0x87 ,0x54 ,0x81 ,0x3D ,0x5F ,0x9C ,0x9C ,0x03 ,0x8D ,0xA9 ,0x47 ,0x6C ,0xAF ,0x9F ,0x1B ,0x54 ,0x3A ,0x28 ,0x96 ,0x13 ,0xD0 ,0x2A ,0x4A ,0xDD ,0xC2 ,0x94 ,0x8B ,0x94 ,0xA9 ,0x65 ,0xB2 ,0xDC ,0xE0 ,0xCB ,0x93 ,0xB7 ,0x71 ,0x23 ,0x6A ,0x7F ,0x1C ,0xF8 ,0x79 ,0xC8 ,0x6C ,0x4F ,0x9C ,0x07 ,0xF2 ,0x6B ,0xBB ,0xD7 ,0x73 ,0xA7 ,0xD9 ,0xED ,0xF6 ,0xB3 ,0x98 ,0x1E ,0x4F ,0x96 ,0xF3 ,0x55 ,0xEC ,0xDD ,0x74 ,0x07 ,0x50 ,0x66 ,0x72 ,0xE5 ,0x02 ,0x5E ,0xC2 ,0xC9 ,0x15 ,0xCA ,0x1D ,0x5F ,0x35 ,0xD1 ,0xCC ,0xC3 ,0x56 ,0x79 ,0xAF ,0xF9 ,0x1B ,0x83 ,0x3A ,0x07 ,0xFC ,0x6B ,0xFA ,0xD0 ,0x6C ,0x9A ,0xCF ,0x05 ,0x38 ,0x70 ,0xE5 ,0xF5 ,0x2D ,0x3D ,0xC8 ,0xF1 ,0x75 ,0x73 ,0x55 ,0xEA ,0x4C ,0x8D ,0xA8 ,0x1D ,0x88 ,0xC3 ,0x7D ,0x4B ,0x68 ,0xEB ,0xE5 ,0x02 ,0x74 ,0x56 ,0x6C ,0xB6 ,0x83 ,0xC1 ,0x9C ,0xF5 ,0xFA ,0x6D ,0x88 ,0x51 ,0xF9 ,0x2D ,0x9F ,0x9A ,0xBD ,0x5F ,0xD0 ,0xCB ,0xB6 ,0x75 ,0x51 ,0xC3 ,0xFA ,0x20 ,0x18 ,0x55 ,0x5B ,0x9A ,0x29 ,0x95 ,0xDA ,0x96 ,0x44 ,0x3D ,0x97 ,0x46 ,0x39 ,0x9F ,0xBB ,0x86 ,0xAC ,0xA1 ,0x21 ,0xFE ,0x4E ,0xBE ,0x97 ,0xD8 ,0x46 ,0x8D ,0xB2 ,0x2A ,0x0B ,0xD0 ,0x87 ,0xA1 ,0xE3 ,0xFC ,0x28 ,0x9C ,0x56 ,0x33 ,0x15 ,0x7B ,0xDC ,0x0B ,0xCD ,0x67 ,0x7F ,0xAA ,0x26 ,0xB1 ,0xFA ,0x4B ,0xE8 ,0x42 ,0x85 ,0xA4 ,0x08 ,0xED ,0xD2 ,0x8E ,0x48 ,0xAB ,0x47 ,0x53 ,0x54 ,0x65 ,0xDC ,0xE2 ,0x81 ,0x11 ,0x1B ,0x0B ,0x70 ,0x85 ,0x5C ,0xAE ,0x18 ,0x8A ,0xA6 ,0xFD ,0xAA ,0x85 };
unsigned char xmmword_4076A0[256] = { 0x7D,0x9E,0x6B,0x09,0x32,0x18,0x08,0x0A,0x5A,0x34,0x34,0x9C,0x0D,0xB3,0xC3,0xC9,0x86,0xB1,0x02,0xD9,0x8C,0x14,0xCD,0xA7,0x0B,0xB2,0x41,0xB5,0xA8,0x38,0x39,0x4C,0xAB,0xB1,0x32,0xD9,0x78,0x9D,0xEA,0xDE,0x34,0xCA,0x28,0xA3,0x96,0x7B,0x77,0xE1,0xDA,0x56,0xC4,0x28,0xF4,0x0C,0x7D,0x60,0x1B,0xE4,0xAE,0x2C,0xB9,0x8F,0xEE,0x1B,0x8C,0x8D,0xCB,0x22,0xEE,0xED,0xFC,0x4B,0xB6,0x46,0x2A,0x9C,0x24,0xD4,0xFD,0x45,0x85,0x4D,0x5D,0xC0,0x4F,0x58,0xE5,0xBC,0x70,0x1B,0x6C,0xAC,0x9E,0xD6,0xD0,0x2B,0xA0,0x5B,0x89,0x35,0xC7,0xFE,0x26,0xF8,0x40,0x86,0xCD,0x49,0xD0,0xD6,0x6B,0xCB,0x65,0x75,0xAA,0xA7,0x91,0xF8,0x1B,0xE8,0x47,0x68,0xB5,0x96,0x1F,0x3F,0xF1,0x05,0xEE,0x5E,0xC5,0x6F,0xCD,0xAF,0x46,0xA1,0xC7,0x36,0x9D,0xD4,0xD5,0x8E,0xCD,0x2C,0xE2,0x8C,0x7A,0xBB,0x0F,0x35,0xE0,0xDC,0x07,0x52,0xA1,0x1B,0x89,0x16,0x96,0x9A,0xF4,0x91,0xF6,0xBA,0xAF,0xBF,0xFE,0x08,0x77,0xFA,0xE0,0x5B,0xA1,0x8D,0x6D,0xAF,0x38,0x5B,0xCC,0xD8,0x89,0x51,0xD7,0x2E,0x6B,0x8A,0x4C,0xCC,0xA0,0x0F,0xA3,0xBF,0x45,0x1F,0x51,0x2E,0xAE,0xBF,0x8A,0x20,0xBA,0xAD,0x68,0xE0,0x4C,0xAA,0xE6,0x8B,0x8F,0xA1,0xDB,0xCB,0xD1,0xAE,0x37,0x7B,0x5C,0xF2,0x6A,0x7C,0x90,0xB6,0x34,0x85,0x69,0x03,0x6D,0x76,0xD8,0x38,0xB5,0xBC,0xD0,0xE6,0xC4,0x23,0x58,0x12,0x65,0xED,0xCC,0xF3,0x22,0x79,0xA0,0xB6,0x29,0xFA,0xB0,0xFC,0xD4,0x85,0xA3,0x8B,0x42,0x05 };
unsigned char page2_decrypted_message[1536] = {};

// Page 3
unsigned char page3_encrypted_message[656] = { 0x95,0xD6,0x41,0x64,0xE0,0x1B,0x3A,0xE7,0xBA,0x2E,0x7F,0x7C,0xD6,0xFC,0x22,0x8A,0xCA,0x95,0xC3,0x18,0xE2,0xE8,0xEE,0x8A,0xBF,0xD9,0x84,0xE1,0x5B,0x2F,0x8C,0x3B,0x6B,0xB8,0x3B,0x2E,0x49,0x01,0x98,0xBD,0x6B,0x18,0xFD,0x8F,0xB0,0xC9,0x2A,0x44,0xA4,0x86,0xD9,0x30,0x39,0xD5,0xC0,0x6D,0x0D,0xCE,0x52,0xCB,0xC1,0xF3,0xE9,0xCB,0xF4,0xB0,0x72,0xB6,0x98,0x9A,0xDC,0x22,0x1E,0xC1,0x60,0x45,0x0B,0x35,0xCB,0x5F,0x05,0x42,0xD5,0xE7,0x87,0x26,0x89,0x9D,0x85,0x37,0xEB,0x8E,0x5A,0x31,0x36,0x06,0x4B,0x81,0x95,0x9D,0x7D,0xC0,0x9A,0x07,0x8E,0xD4,0x32,0x10,0x39,0xA6,0x6C,0x2C,0xD5,0x2B,0xE3,0x8D,0x7C,0x44,0xBF,0xAC,0xA8,0x96,0xF1,0x1D,0xE9,0x98,0x05,0x02,0xDE,0x23,0xAA,0x94,0xED,0x55,0x72,0x85,0x96,0x34,0x0C,0x4C,0xFE,0x18,0x7F,0x1B,0xF9,0x56,0x30,0x36,0x71,0x07,0x49,0x3E,0x1B,0x53,0x89,0xD7,0xA1,0xE2,0xDE,0x74,0xB5,0xC5,0xF0,0x7C,0x7C,0x15,0x49,0x4D,0x6B,0x1C,0xF5,0xB9,0x14,0x97,0x6D,0x84,0x03,0x7D,0xDA,0xFF,0x4E,0x00,0x4F,0x2E,0x72,0xB8,0xF1,0xAE,0x17,0xB7,0xA5,0xB8,0x97,0xF8,0x5E,0x75,0xED,0x08,0x71,0x41,0x89,0x4E,0x1C,0xDF,0xDB,0xD1,0xDD,0x05,0xE5,0x25,0x3D,0xD1,0x82,0x56,0xFA,0xE8,0x51,0xF0,0x23,0x58,0xA3,0x1A,0x34,0x67,0x32,0x93,0x87,0x3B,0x35,0xD7,0xE9,0x11,0x8D,0x79,0xFF,0xA8,0x6C,0xEE,0x21,0x6E,0xA7,0x90,0xDE,0x94,0x27,0xCF,0x90,0x2F,0x92,0xEC,0xAC,0xD5,0xDF,0xB9,0x93,0xCD,0x14,0xD2,0x53,0xC3,0x7A,0x6A,0x0A,0x97,0x8E,0x28,0xDC,0x32,0xE1,0xBA,0x0B,0x72,0xDA,0x0E,0x22,0x38,0xC7,0x17,0x06,0xD4,0x68,0xDE,0xF9,0x83,0xE1,0x14,0xC2,0x71,0xAF,0xA9,0x2C,0x28,0x07,0xA8,0x77,0xDB,0xA9,0x4E,0xAA,0xC9,0xED,0x36,0x86,0xD1,0xD8,0x9E,0x03,0x1C,0x7C,0xAA,0xF4,0xE8,0xDA,0xDA,0x3E,0x29,0x88,0xBA,0xF2,0x34,0xE9,0x68,0x6C,0x80,0x41,0x81,0xF1,0x75,0xBD,0x49,0x3B,0x41,0x3F,0x72,0x94,0xCA,0x5B,0x0E,0xA2,0x32,0xE5,0x65,0xF0,0x37,0xFC,0xBE,0xFB,0x8F,0x3F,0x38,0xD7,0xF2,0x97,0xA4,0x7E,0x25,0x62,0xA1,0x42,0x17,0xC3,0xEB,0x37,0x60,0x3C,0x59,0xB3,0x31,0x79,0x8B,0x2B,0x7B,0x46,0x53,0xF8,0x58,0x64,0x16,0xBB,0xBE,0x39,0x53,0xFA,0x74,0xC3,0xB5,0x9D,0x21,0x73,0x87,0x2B,0x93,0x45,0x0C,0x5D,0xBF,0x0E,0x13,0x5B,0xAE,0x57,0x93,0x22,0x8A,0xE6,0xCC,0xF7,0x48,0x4F,0x74,0xB9,0x91,0x76,0x78,0xC8,0x2E,0x43,0x51,0xCC,0xE9,0xB2,0x42,0xB4,0x99,0x61,0x1E,0x2E,0x97,0x4E,0xC4,0xC5,0xFB,0x3C,0x23,0x93,0x33,0x0C,0x26,0x45,0x74,0x17,0xC3,0x1F,0x52,0x54,0x1A,0xA6,0x38,0xEF,0x26,0x32,0x54,0x2B,0xFC,0xA5,0xC9,0xDA,0xE9,0xE9,0xE4,0x19,0x06,0x16,0xED,0x6B,0x72,0xD1,0xAB,0x09,0x05,0xA3,0x87,0xAB,0x1F,0xBB,0x5E,0x9A,0xA5,0xD7,0xEF,0x01,0x89,0x8E,0x9F,0xBC,0xED,0x51,0xF4,0x1E,0xE1,0xB6,0x8D,0x8D,0x78,0xED,0xEC,0x66,0x7B,0xC1,0x0E,0x82,0xC9,0x13,0x1C,0x49,0xC1,0x33,0xFD,0xCB,0x0D,0x5E,0x78,0xD5,0x85,0xED,0x23,0x69,0x2F,0x62,0x5E,0x3F,0xE9,0xD4,0xC5,0x02,0x74,0x64,0xDE,0x89,0x3D,0x9C,0x30,0x03,0xFB,0x05,0x85,0xDE,0x8B,0xD6,0xE5,0xB9,0x96,0x1C,0x0F,0x4F,0x3B,0x99,0x25,0xC2,0x89,0xD7,0x79,0xF2,0x47,0x1C,0xD6,0xA3,0xD0,0x54,0x92,0xA0,0x92,0x4E,0x4F,0x99,0x7D,0xB5,0x13,0x1F,0xF3,0x0A,0x0B,0xE2,0x74,0x56,0xC1,0x49,0x61,0x7E,0xD7,0x39,0xEF,0xA0,0xD0,0xDB,0x22,0xB5,0xAF,0xA6,0xBD,0x49,0x4E,0xD0,0xDE,0x85,0x7E,0xDD,0xF6,0x18,0x63,0x05,0x4F,0xEF,0x26,0xA2,0xD8,0x9B,0x06,0x81,0xFB,0x95,0xAC,0x9A,0x9D,0xFA,0xAF,0x55,0x41,0x24,0x43,0x11,0x36,0x3F,0x3C,0xBA,0x78,0x89,0xC4,0x34,0xDC,0x1B,0xB4,0x3F,0xB1,0xB6,0x00,0x42,0xD8,0x6A,0xB6,0xA6,0x8A,0x71,0xC3,0x7B,0x1D,0x4B,0x54,0x7A,0x97,0x14,0xAD,0xF5,0x13,0x90,0x5D };
unsigned char page3_encrypted_message_buffer[1536] = {};
unsigned char xmmword_4064A0[256] = { 0x1B,0x48,0xF3,0xDE,0x27,0xDB,0x0A,0x80,0xFF,0xA2,0x91,0xB1,0x61,0xFF,0xE9,0xCA,0x6C,0xEE,0x79,0xDB,0x55,0x9C,0x80,0x47,0x57,0x99,0x20,0xCB,0x23,0xC1,0x30,0x31,0x1A,0x36,0x6F,0x85,0x61,0xEE,0x59,0x66,0xEE,0x0A,0x72,0x29,0x36,0x71,0xC3,0x58,0x70,0x74,0x01,0x17,0x59,0xDE,0x78,0xB8,0x37,0xB6,0x76,0x30,0x3C,0x01,0x79,0xDB,0x6C,0xFC,0x6E,0x5D,0x88,0x38,0x35,0x73,0x82,0x49,0xBC,0x61,0xF8,0xEB,0xC6,0xA6,0xCA,0xDE,0x87,0x7E,0xEE,0x27,0xF2,0xF7,0x4C,0x51,0x0F,0x9A,0xC6,0xC7,0x23,0xE5,0x3F,0x76,0xA8,0xD4,0x5D,0xB5,0xD6,0x91,0x8C,0xEE,0x53,0x0D,0xB1,0xA2,0x10,0x27,0x81,0xA4,0x81,0xCD,0x09,0x30,0x87,0x5B,0x5F,0x40,0xC6,0x1A,0x35,0xE6,0x85,0x36,0x4C,0x5E,0xC8,0x83,0xBF,0x58,0x99,0x23,0x8E,0xDD,0xC2,0x2B,0xA1,0x2C,0xB5,0x8F,0xCE,0xE4,0x9E,0x94,0x3C,0x58,0xB1,0x3F,0x5C,0xD8,0x93,0xFF,0x4C,0x02,0xCD,0xB5,0x83,0xEA,0x33,0x59,0xCD,0x26,0xB8,0x36,0x0A,0x18,0x73,0x49,0x8B,0x4D,0x65,0x0C,0x58,0x0E,0x5F,0x2E,0xA3,0x1F,0x24,0x72,0xA7,0xF8,0xD9,0xA5,0xEE,0x30,0x23,0x7C,0x4A,0xDD,0xC4,0x87,0x69,0x61,0xAB,0x80,0xF2,0x92,0x3E,0x80,0x7D,0xBC,0x31,0x9D,0x7E,0x4A,0xAE,0xC4,0xC6,0x3E,0x14,0x02,0xF6,0x8D,0x9D,0x11,0xFF,0x03,0x65,0xA7,0x03,0x28,0xE6,0x2A,0xA5,0xDA,0x8F,0x1D,0x1B,0x62,0x03,0x53,0x81,0xB1,0xA0,0x57,0x44,0xE7,0x8A,0xB0,0x6D,0x1D,0x69,0xBF,0xD4,0x5E,0xB4,0x1E,0x4E,0x90,0x23,0x38 };
//unsigned char xmmword_4076A0[256] = { 0x7D,0x9E,0x6B,0x09,0x32,0x18,0x08,0x0A,0x5A,0x34,0x34,0x9C,0x0D,0xB3,0xC3,0xC9,0x86,0xB1,0x02,0xD9,0x8C,0x14,0xCD,0xA7,0x0B,0xB2,0x41,0xB5,0xA8,0x38,0x39,0x4C,0xAB,0xB1,0x32,0xD9,0x78,0x9D,0xEA,0xDE,0x34,0xCA,0x28,0xA3,0x96,0x7B,0x77,0xE1,0xDA,0x56,0xC4,0x28,0xF4,0x0C,0x7D,0x60,0x1B,0xE4,0xAE,0x2C,0xB9,0x8F,0xEE,0x1B,0x8C,0x8D,0xCB,0x22,0xEE,0xED,0xFC,0x4B,0xB6,0x46,0x2A,0x9C,0x24,0xD4,0xFD,0x45,0x85,0x4D,0x5D,0xC0,0x4F,0x58,0xE5,0xBC,0x70,0x1B,0x6C,0xAC,0x9E,0xD6,0xD0,0x2B,0xA0,0x5B,0x89,0x35,0xC7,0xFE,0x26,0xF8,0x40,0x86,0xCD,0x49,0xD0,0xD6,0x6B,0xCB,0x65,0x75,0xAA,0xA7,0x91,0xF8,0x1B,0xE8,0x47,0x68,0xB5,0x96,0x1F,0x3F,0xF1,0x05,0xEE,0x5E,0xC5,0x6F,0xCD,0xAF,0x46,0xA1,0xC7,0x36,0x9D,0xD4,0xD5,0x8E,0xCD,0x2C,0xE2,0x8C,0x7A,0xBB,0x0F,0x35,0xE0,0xDC,0x07,0x52,0xA1,0x1B,0x89,0x16,0x96,0x9A,0xF4,0x91,0xF6,0xBA,0xAF,0xBF,0xFE,0x08,0x77,0xFA,0xE0,0x5B,0xA1,0x8D,0x6D,0xAF,0x38,0x5B,0xCC,0xD8,0x89,0x51,0xD7,0x2E,0x6B,0x8A,0x4C,0xCC,0xA0,0x0F,0xA3,0xBF,0x45,0x1F,0x51,0x2E,0xAE,0xBF,0x8A,0x20,0xBA,0xAD,0x68,0xE0,0x4C,0xAA,0xE6,0x8B,0x8F,0xA1,0xDB,0xCB,0xD1,0xAE,0x37,0x7B,0x5C,0xF2,0x6A,0x7C,0x90,0xB6,0x34,0x85,0x69,0x03,0x6D,0x76,0xD8,0x38,0xB5,0xBC,0xD0,0xE6,0xC4,0x23,0x58,0x12,0x65,0xED,0xCC,0xF3,0x22,0x79,0xA0,0xB6,0x29,0xFA,0xB0,0xFC,0xD4,0x85,0xA3,0x8B,0x42,0x05 };
unsigned char page3_decrypted_message[1536] = {};
    
// Page 4
unsigned char page4_encrypted_message[736] = { 0xCD,0xE4,0x71,0x9D,0xF3,0x22,0xAE,0xA7,0x66,0x31,0xC7,0xE5,0x99,0xBA,0x2C,0x3B,0x5B,0x0B,0xEA,0x83,0xCD,0x8F,0x18,0x6C,0xB7,0x78,0x42,0xE8,0xAB,0x6A,0xBE,0x99,0x9D,0x9A,0x90,0xE7,0xA3,0x5A,0x59,0xE9,0xF3,0xB7,0xE7,0x11,0x66,0x90,0x19,0x94,0xB5,0x1F,0x07,0xC4,0x0D,0x4D,0x1A,0x42,0x25,0x9D,0xFB,0x29,0x24,0xA5,0xA2,0x8A,0xD3,0x35,0x54,0x0C,0x06,0x1C,0x8F,0x7A,0x92,0x48,0x3D,0xB7,0xA7,0x0A,0x37,0x94,0x93,0xE3,0x63,0x2E,0xA7,0x19,0x5E,0x48,0xEB,0x1B,0x37,0xC4,0xED,0x89,0x02,0x38,0x4D,0x70,0x27,0xC8,0xB7,0x68,0xFF,0x68,0x01,0xE6,0xAC,0x84,0x1B,0x37,0x1E,0xD2,0xB0,0xAC,0xD5,0xA6,0x12,0x4C,0xFE,0xB3,0xD6,0x48,0x34,0x61,0xDE,0xF2,0x8D,0x35,0x66,0x15,0x7F,0xE2,0x50,0xE8,0x8A,0x7C,0x26,0x08,0x4E,0xA4,0x2D,0x55,0xDE,0xA9,0x47,0x60,0x7B,0x54,0x33,0x65,0xF5,0xBE,0x00,0x69,0x9A,0xEB,0x96,0x45,0x52,0x63,0xCA,0x09,0x54,0xD3,0x61,0x78,0xBA,0x40,0x66,0xB1,0x29,0x15,0xDC,0xEB,0x37,0xE0,0x41,0x65,0xDF,0xDA,0xB7,0xF8,0x3D,0x74,0x61,0x57,0x2A,0x06,0xD6,0x1C,0xFF,0x75,0x6D,0xD4,0x51,0xC4,0xD2,0x94,0xAC,0x6E,0xAE,0x6A,0x6A,0x77,0xEC,0xC5,0x90,0x93,0xD6,0x23,0xC3,0xDF,0x4B,0xD1,0xDE,0x75,0xB3,0xD0,0xD9,0x00,0x0C,0x33,0xAE,0x9E,0x92,0xDE,0x6A,0x1D,0x9A,0x6F,0x33,0x83,0x6D,0x64,0x2D,0xC6,0x6B,0xCB,0x9A,0x19,0xAE,0xA2,0x4C,0x7F,0xBB,0xB1,0xE5,0x73,0x4A,0x46,0x77,0x46,0x7E,0xEE,0x27,0x27,0x20,0x03,0xEE,0x39,0xAC,0x0E,0x71,0x4E,0xED,0xFB,0x46,0x2C,0xAE,0xA5,0x3C,0x9D,0x7E,0x11,0xA8,0x03,0x1C,0x25,0x0D,0x50,0x07,0xF5,0x1C,0x27,0x85,0x92,0xA7,0xF5,0x50,0x85,0x65,0x4A,0x6C,0x2D,0x80,0xB5,0x91,0xC5,0xEF,0x52,0x3F,0xEF,0x9C,0x06,0xA2,0xDE,0xE1,0xCB,0x64,0xAA,0x60,0xF6,0x0E,0xB7,0x27,0x3D,0x52,0x7A,0x45,0x0E,0xE5,0xA5,0x64,0x86,0x55,0xEA,0x91,0x88,0x67,0x2B,0x29,0x09,0x72,0xF6,0x18,0xAD,0x73,0x58,0x74,0x1A,0x84,0x04,0x29,0xDC,0x7E,0xB9,0x5A,0xC0,0xAF,0x35,0xF2,0xE5,0xA3,0xA1,0xEA,0x57,0x3C,0x7B,0xAC,0x98,0x87,0xD8,0x3A,0xB8,0xD6,0x3F,0x28,0xE6,0xAF,0x02,0xA2,0xD8,0xBD,0x94,0x28,0xD5,0x94,0x61,0x71,0x24,0x76,0x97,0x42,0xEE,0xD8,0xB9,0xDA,0xCB,0x29,0xE5,0xBF,0x51,0x74,0x89,0xB5,0xBD,0xD9,0x00,0x65,0x09,0xD0,0xC1,0x86,0xB2,0x27,0x72,0xB0,0x48,0x15,0xBD,0x68,0x78,0x02,0x1C,0x78,0x8B,0xD7,0x7D,0x0E,0x85,0xB4,0x88,0xB6,0xEA,0x9E,0x87,0x8F,0x50,0x1A,0x85,0x5C,0x33,0xFA,0x01,0x79,0x58,0xA8,0x93,0x49,0x46,0x56,0xF4,0xC0,0x43,0x81,0x98,0x6C,0xB0,0x4B,0x92,0xC8,0x23,0x9A,0x55,0xEF,0x22,0x0F,0x91,0x02,0x6E,0x15,0x57,0xCC,0x34,0x41,0xDC,0x2A,0x6F,0xCB,0x92,0x83,0x4D,0xE1,0xEE,0xDC,0x94,0x47,0xC8,0xF5,0xC5,0xD2,0x82,0xB7,0x0A,0xD8,0x02,0x0C,0xE8,0xC4,0x1D,0x06,0x6B,0xA9,0xD8,0xFA,0xA5,0x1D,0xCC,0x42,0xE8,0x11,0x69,0x37,0x0A,0xF0,0xD7,0x67,0x40,0x4D,0x57,0xD1,0xFD,0x5E,0x66,0x4C,0x32,0x89,0x81,0xC1,0x24,0x96,0xB7,0x87,0x80,0x53,0x61,0x19,0x30,0x65,0x6D,0x93,0xE5,0x6A,0x95,0xF1,0x4A,0x37,0xA8,0x00,0x41,0x08,0xD1,0xCF,0x11,0xC1,0x69,0x86,0x84,0xB5,0x61,0x3E,0x80,0xC8,0xCA,0x5F,0x13,0xEC,0x8E,0xF3,0x6A,0xF0,0xA0,0x37,0x9F,0x5F,0x91,0xD8,0x38,0x1A,0x8A,0x63,0x95,0xA4,0xCB,0x04,0xFB,0x7A,0xD9,0xDA,0x38,0x97,0x07,0x42,0xA0,0x45,0x3F,0xAD,0x7E,0xD3,0x34,0x2A,0x02,0x09,0xF3,0xE3,0x84,0xA2,0x8C,0xCF,0x65,0xF6,0xD1,0xD0,0xAD,0xC0,0x2B,0x4C,0x36,0x7E,0x97,0x08,0xC2,0x4E,0xAA,0x32,0x9B,0x8D,0x74,0xDF,0x5A,0x34,0x5C,0x09,0xAA,0x8E,0x30,0x00,0xF9,0x2B,0xDB,0xE0,0x09,0x37,0x5B,0xD7,0x22,0xFA,0x42,0x01,0x88,0xB8,0x90,0xE0,0x2B,0xB7,0x18,0x46,0xA9,0x75,0xDC,0xDB,0xDF,0xCF,0xA2,0xDF,0xAC,0x9A,0xFB,0x08,0x30,0x5A,0x57,0x32,0x00,0xAE,0x28,0x15,0x97,0x79,0xD5,0x03,0xB6,0x6F,0xB8,0x87,0x8B,0xAE,0xDC,0xB8,0xCA,0x4B,0xF1,0xAE,0x00,0x4B,0xED,0xCD,0x1F,0x59,0x16,0x9F,0x91,0x51,0x44,0x7B,0xA0,0xF8,0x86,0xCB,0xB5,0x2E,0x00,0x45,0xD6,0xC5,0xBD,0x9C,0x09,0x69,0x03,0xBF,0x0A,0x6E,0xCD,0x60,0xB8,0xA6,0x43,0x59,0x92,0xEE,0x63,0x29,0x7A,0x99,0xFE,0xA8,0xED,0x04,0xF3,0x70,0x08,0x52,0x56,0xBC,0x6E };
unsigned char page4_encrypted_message_buffer[1536] = {};
unsigned char page4_decrypted_message[1536] = {};

// GetKey4
unsigned char getkey4_encrypted_message[1536] = { 0x42 ,0xBC ,0x23 ,0x27 ,0x0F ,0xF2 ,0x36 ,0x8C ,0x92 ,0x17 ,0xD9 ,0xEF ,0x20 ,0xAE ,0xDE ,0x57 ,0x5D ,0x8E ,0xA4 ,0x05 ,0xFD ,0x0C ,0xCE ,0x09 ,0xEA ,0x88 ,0x43 ,0xFE ,0x93 ,0x3A ,0x99 ,0x02 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 ,0x8B ,0x76 ,0x4F ,0x6B ,0x5C ,0xAF ,0x03 ,0x02 ,0xFA ,0x61 ,0xAF ,0xFD ,0xB2 ,0x04 ,0x02 ,0x20 };
unsigned char getkey4_encrypted_message_buffer[1536] = {};
unsigned char getkey4_decryption_buffer[1536] = {};


void exit_print(const char* a1)
{
    puts(a1);
    exit(0);
}


int input_handler1(char* a1)
{
    int64_t loop_index = 0; // rbx
    int result; // eax


    if (dword_408488 == 1)
        memcpy(unk_4077A0, unk_406EA0, 512);
    if (dword_408484 == 1)
        memcpy(&unk_4077A0, unk_4065A0, 512);

    while (1)
    {
        result = getc(stdin);
        if (result == 10 || !result)
            break;
        if ((result - 32) > 0x5E)
            exit_print("The other patrons of the library are alarmed by the weird noises you're making?!!?");

        *(a1 + loop_index++) = (char)result;

        if (loop_index == 199)
            return result;
    }
    *(a1 + loop_index) = 0;
    return result;
}

int input_handler2(char* a1, int a2)
{
    int i = 0; // rbx
    int result; // eax

    if (dword_408488 == 1)
        memcpy(unk_4077A0, unk_406EA0, 512);
    if (dword_408484 == 1)
        memcpy(&unk_4077A0, unk_4065A0, 512);

    if (a2 > 1)
    {
        for (i = 0; ; ++i)
        {
            result = getc(stdin);
            if (result == 10 || !result)
                break;
            if ((result - 32) > 0x5E)
                exit_print("The other patrons of the library are alarmed by the weird noises you're making?!!?");
            *(a1 + i) = result;
            result = i + 1;
            if (i == a2 - 2)
                return result;
        }
        *(a1 + i) = 0;
    }
    return result;
}

uint64_t sub_4021e0() {
    BIGNUM* var_128 = BN_new();
    BIGNUM* var_120 = BN_new();
    RSA* rax = RSA_new();
    unsigned char to[256];

    std::memset(to, 0, 256);
    BN_hex2bn(&var_128, data_4077a0);
    BN_hex2bn(&var_120, data_40338e);
    RSA_set0_key(rax, var_128, var_120, 0);
    RSA_public_encrypt(256, (unsigned char*)src_ptr, to, rax, 3);
    uint64_t rax_1 = memcmp(to, data_4076a0, 256);
    if (rax_1 == 0)
    {
        if (dword_408488 == 0)
        {
            dword_408488 = 1;
            BN_free(var_128);
            BN_free(var_120);
            return rax_1;
        }
        rax_1 = ((uint64_t)dword_408484);
        if (rax_1 == 0)
        {
            dword_408484 = 1;
            BN_free(var_128);
            BN_free(var_120);
            return rax_1;
        }
        dword_408480 = 1;
    }

    BN_free(var_128);
    BN_free(var_120);
    return rax_1;
}

bool GetKey2(char* input)
{
    char result[29];

    int8_t y[] = { 0x44, 0x36, 0x63, 0xC8, 0x1C, 0x28, 0x84, 0xA0, 0x8D, 0x3A, 0x2F, 0x39, 0xF7, 0xEE, 0x92, 0x4F,
                          0xA7, 0xD5, 0xD3, 0x6C, 0x81, 0x8C, 0x4F, 0xCD, 0x37, 0x17, 0x89, 0xFC, 0xF9 };

    int8_t x[] = { 0x07, 0x5E, 0x06, 0xAB, 0x77, 0x08, 0xE6, 0xCF, 0xE2, 0x51, 0x5C, 0x19, 0x98, 0x80, 0xB2, 0x3B,
                          0xCF, 0xB0, 0xF3, 0x02, 0xE4, 0xF4, 0x3B, 0xED,
                          0x44, 0x7F, 0xEC, 0x90,
                          0x9F };


    memcpy(result, input, 29);

    int8_t i = 0;
    while (1)
    {
        result[i] ^= y[i];
        if (++i == sizeof(result))
            break;
    }

    int8_t x_index = 0;

    for (int8_t j = 7; ; j = x[x_index])
    {
        if (result[x_index] != j)
            goto LABEL_10;
        if (++x_index == 29)
            break;
    }
    if (strlen(input) > 29)
    LABEL_10:
        exit_print("You were unable to locate the next page of the diary");
    return true;
}

bool GetKey3(char* a1)
{
    uint8_t v2 = 0; // [rsp+14h] [rbp-4h]

    v2 = (a1[0] + 15) == 98;
    if ((a1[1] ^ 0x3B) == 94)
        ++v2;
    if ((a1[2] + 57) == 154)
        ++v2;
    if ((a1[3] ^ 0x38) == 74)
        ++v2;
    if ((a1[4] ^ 0x74) == 23)
        ++v2;
    if ((a1[5] ^ 0x3B) == 83)
        ++v2;
    if ((a1[6] + 3) == 35)
        ++v2;
    if ((a1[7] - 67) == 49)
        ++v2;
    if ((a1[8] + 9) == 113)
        ++v2;
    if ((a1[9] + 12) == 113)
        ++v2;
    if ((a1[10] + 90) == 122)
        ++v2;
    if ((a1[11] - 16) == 82)
        ++v2;
    if ((a1[12] + 123) == 234)
        ++v2;
    if ((a1[13] ^ 0x29) == 70)
        ++v2;
    if ((a1[14] + 127) == 234)
        ++v2;
    if ((a1[15] ^ 2) == 34)
        ++v2;
    if ((a1[16] + 84) == 186)
        ++v2;
    if ((a1[17] ^ 0xB0) == 223)
        ++v2;
    if ((a1[18] + 102) == 216)
        ++v2;
    if ((a1[19] - 109) == -77)
        ++v2;
    if ((a1[20] ^ 0x20) == 67)
        ++v2;
    if ((a1[21] + 111) == 219)
        ++v2;
    if ((a1[22] + 24) == 141)
        ++v2;
    if ((a1[23] + 9) == 110)
        ++v2;
    if ((a1[24] + 48) == 163)
        ++v2;
    if ((a1[25] - 19) == -19)
        ++v2;
    if ((a1[26] - 61) == -61)
        ++v2;
    if ((a1[27] - 109) == -109)
        ++v2;
    if ((a1[28] - 118) == -118)
        ++v2;
    if ((a1[29] + 126) == 126)
        ++v2;
    if ((a1[30] + 42) == 42)
        ++v2;
    if ((a1[31] ^ 0x5C) == 92)
        ++v2;
    return v2 == 32;
}

bool GetKey4(char* a1)
{
    const char key_string[] = "Turn over the page";
 
    //AES
    AES_KEY key;
    unsigned char* in = (unsigned char*)&getkey4_encrypted_message_buffer;
    unsigned char* out = (unsigned char*)&getkey4_decryption_buffer;
    char dest[32]; // [rsp+20h] [rbp-818h] BYREF

    memset(getkey4_encrypted_message_buffer, 0, sizeof(getkey4_encrypted_message_buffer));
    memset(getkey4_decryption_buffer, 0, sizeof(getkey4_decryption_buffer));
    memcpy(getkey4_encrypted_message_buffer, getkey4_encrypted_message, sizeof(getkey4_encrypted_message));

    // Prepare Key buffer
    memset(dest, 0, 32);
    std::memcpy(dest, key_string, 19);
    const unsigned char* userKey_ptr = (const unsigned char*)dest;
    AES_set_decrypt_key(userKey_ptr, 256, &key);

    // Prepare Iterators
    unsigned char* in_iterator = (unsigned char*)in;
    uint64_t in_orig_loc = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in));
    uint64_t in_iterator_location = 0;

    // Decrypt Hidden Message
    do
    {
        in = in_iterator;
        in_iterator += 16;
        if (in_iterator_location < (in_orig_loc + sizeof(getkey4_encrypted_message)))
        {
            AES_decrypt(in, out, &key);
        }
        out += 16;
        in_iterator_location = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in_iterator));

    } while (in_iterator_location != (in_orig_loc + 1536));

    memcpy(getkey4_encrypted_message, getkey4_encrypted_message_buffer, sizeof(getkey4_encrypted_message));
    auto input_lenth = strlen(a1);
    return strncmp(a1, (const char*)getkey4_encrypted_message, input_lenth) != 0;
}

int page1()
{
    memset(src, 0, sizeof(src));
    puts("You have heard that a rival historian recently discovered a copy of a chapter of the diary of Madame de Maintenon at the local library. \nBut being unable to solve the mystery, returned it in frustration. \nHaving long been fascinated by her history, you can't wait to investigate. \nWhat do you do?");
    input_handler1(src);

    // Bitops
    char* bitop1 = src;
    char bitop2 = 0; // ecx
    char bitop3 = 0; // eax

    //AES
    AES_KEY key;
    unsigned char* in = (unsigned char*)&page1_encrypted_message_buffer;
    unsigned char* out = (unsigned char*)&page1_decrypted_message;
    char dest[32]; // [rsp+20h] [rbp-818h] BYREF

    // bit operation.
    do
    {
        *&bitop2 = *bitop1;
        bitop1 += 4;
        bitop3 = ~*&bitop2 & (*&bitop2 - 0x1010101) & 0x80808080;
        //printf("%d", bitop3);
    } while (!bitop3);

    // bit operation.
    if (((uint8_t)bitop2 & ((uint8_t)bitop2 - 0x1010101) & 0x8080) == 0)
    {
        bitop3 >>= 16;
        bitop1 += 2;
    }

    // Check if input is equals to or smaller than 19 or if memcmp matches.
    if (sizeof(src) <= 18 || memcmp("Head to the library", src, 19))
    {
        exit_print(
            "without a clear plan of action, your thoughts eventually pass on to more pressing matters, and you return to watch"
            "ing subway surfer tik-toks. May another, more focussed mind, solve this mystery.");
    }

    // Prepare buffers
    memset(page1_encrypted_message_buffer, 0, 1536);
    std::memcpy(page1_encrypted_message_buffer, page1_encrypted_message, 896);

    // Prepare Key buffer
    memset(dest, 0, 32);
    std::memcpy(dest, src, 19);
    const unsigned char* userKey_ptr = (const unsigned char*)dest;
    AES_set_decrypt_key(userKey_ptr, 256, &key);

    // Prepare Iterators
    unsigned char* in_iterator = (unsigned char*)in;
    uint64_t in_orig_loc = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in));
    uint64_t in_iterator_location = 0;

    // Decrypt Hidden Message
    do
    {
        in = in_iterator;
        in_iterator += 16;
        if (in_iterator_location < (in_orig_loc + sizeof(page1_encrypted_message)))
        {
            AES_decrypt(in, out, &key);
        }
        out += 16;
        in_iterator_location = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in_iterator));

    } while (in_iterator_location != (in_orig_loc + 1536));

    sub_4021e0();
    printf("%s", page1_decrypted_message);
    return 1;
}

int page2()
{
    //AES
    AES_KEY key;
    char dest[32]; // [rsp+20h] [rbp-818h] BYREF

    unsigned char* in = page2_encrypted_message;
    unsigned char* out = (unsigned char*)&page2_decrypted_message;
    const unsigned char* userKey_ptr = (const unsigned char*)dest;
    char user_input_buffer[200];

    // Get input
    memset(src, 0, 200);
    printf("What do you do?\n");
    input_handler1(src);
    strncpy_s(dest, src, 200);

    // Get decryption key
    if (!GetKey2(src))
        exit_print(
            "You were unable to locate the second page of the diary, after many hours of searching you give up and return home");
    
    //Not sure what this does.
    std::memcpy(xmmword_4076A0, xmmword_406DA0, sizeof(xmmword_406DA0));

    //Prepare vbuffers
    memset(page2_encrypted_message_buffer, 0, 1536);
    std::memcpy(page2_encrypted_message_buffer, page2_encrypted_message, 608);
    std::memset(page2_decrypted_message, 0, 1536);

    // Prepare Key Buffer
    memset(dest, 0, 32);
    std::memcpy(dest, src, 32);
    AES_set_decrypt_key(userKey_ptr, 256, &key);

    // Prepare iterators
    unsigned char* in_iterator = (unsigned char*)in;
    uint64_t in_orig_loc = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in));
    uint64_t in_iterator_location = 0;

    // Decrypt Hidden Message
    do
    {
        in = in_iterator;
        in_iterator += 16;
        if (in_iterator_location < (in_orig_loc + sizeof(page2_encrypted_message)))
        {
            AES_decrypt(in, out, &key);
        }
        out += 16;
        in_iterator_location = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in_iterator));

    } while (in_iterator_location != (in_orig_loc + 1536));

    sub_4021e0();
    printf("%s", page2_decrypted_message);
    return 1;
}

int page3()
{
    //AES
    AES_KEY key;
    char dest[32]; // [rsp+20h] [rbp-818h] BYREF

    unsigned char* in = page3_encrypted_message;
    unsigned char* out = (unsigned char*)&page3_decrypted_message;
    const unsigned char* userKey_ptr = (const unsigned char*)dest;

    // Get input
    memset(src, 0, 200);
    printf("What do you do?\n");
    input_handler1(src);
    strncpy_s(dest, src, 200);

    // Get decryption key
    if (!GetKey3(src))
        exit_print(
            "Where could the third page possibly be? How could your fellow historian have been so careless with such a priceless artifact???");

    //Not sure what this does.
    std::memcpy(xmmword_4076A0, xmmword_4064A0, sizeof(xmmword_4064A0));

    //Prepare vbuffers
    memset(page3_encrypted_message_buffer, 0, 1536);
    std::memcpy(page3_encrypted_message_buffer, page3_encrypted_message, 656);
    std::memset(page3_decrypted_message, 0, 1536);

    // Prepare Key Buffer
    memset(dest, 0, 32);
    std::memcpy(dest, src, 32);
    AES_set_decrypt_key(userKey_ptr, 256, &key);

    // Prepare iterators
    unsigned char* in_iterator = (unsigned char*)in;
    uint64_t in_orig_loc = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in));
    uint64_t in_iterator_location = 0;

    // Decrypt Hidden Message
    do
    {
        in = in_iterator;
        in_iterator += 16;
        if (in_iterator_location < (in_orig_loc + sizeof(page3_encrypted_message)))
        {
            AES_decrypt(in, out, &key);
        }
        out += 16;
        in_iterator_location = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in_iterator));

    } while (in_iterator_location != (in_orig_loc + 1536));

    sub_4021e0();
    printf("%s", page3_decrypted_message);
    return 1;
}

int page4()
{
    //AES
    AES_KEY key;
    char dest[32]; // [rsp+20h] [rbp-818h] BYREF

    unsigned char* in = page4_encrypted_message;
    unsigned char* out = (unsigned char*)&page4_decrypted_message;
    const unsigned char* userKey_ptr = (const unsigned char*)dest;

    // Get input
    memset(src, 0, 200);
    printf("What do you do?\n");
    input_handler1(src);
    strncpy_s(dest, src, 200);

    // Get decryption key
    if (!GetKey4(src))
        exit_print(
            "You're so close to the final page! You survey all three pages you discovered in despair. So close yet so far.");

    //Not sure what this does.
    std::memcpy(xmmword_4076A0, xmmword_4064A0, sizeof(xmmword_4064A0));

    //Prepare vbuffers
    memset(page4_encrypted_message_buffer, 0, 1536);
    std::memcpy(page4_encrypted_message_buffer, page4_encrypted_message, 736);
    std::memset(page4_decrypted_message, 0, 1536);

    // Prepare Key Buffer
    memset(dest, 0, 32);
    std::memcpy(dest, src, 32);
    AES_set_decrypt_key(userKey_ptr, 256, &key);

    // Prepare iterators
    unsigned char* in_iterator = (unsigned char*)in;
    uint64_t in_orig_loc = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in));
    uint64_t in_iterator_location = 0;

    // Decrypt Hidden Message
    do
    {
        in = in_iterator;
        in_iterator += 16;
        if (in_iterator_location < (in_orig_loc + sizeof(page4_encrypted_message)))
        {
            AES_decrypt(in, out, &key);
        }
        out += 16;
        in_iterator_location = static_cast<uint64_t>(reinterpret_cast<uintptr_t>(in_iterator));

    } while (in_iterator_location != (in_orig_loc + 1536));

    sub_4021e0();
    printf("%s", page4_decrypted_message);
    return 1;
}

int ending()
{

    return 1;
}

int main()
{
    printf("%s", intro);

    page1();
    page2();
    page3();
    page4();
    system("pause");
    
    
    
    //ending();

    //First_Key();
    //Second_Key();
    //Third_Key();
    //Fourth_Key();
}